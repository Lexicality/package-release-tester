name: Build & Push
on:
  push:
    branches:
      - main
      - master
    paths: pyproject.toml
env:
  python_version: "3.7"
  poetry_version: "1.4.2"
  github_api_version: "2022-11-28"

permissions: write-all

jobs:
  build_and_release:
    name: Build & Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python_version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.poetry_version }}

      - name: Get release tag
        id: release-tag
        # Using shell: bash explicitly because it turns on safety features like pipefail
        shell: bash
        run: |
          echo "tag=v$(poetry version --short --no-ansi --no-interaction)" >> "$GITHUB_OUTPUT"

      - name: Check for pre-existing release
        id: safety
        env:
          tag: ${{ steps.release-tag.outputs.tag }}
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          if gh release view ${{ env.tag }} >/dev/null 2>&1; then
            echo "check=false" >> "$GITHUB_OUTPUT"
          else
            echo "check=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Build the new version
        if: steps.safety.outputs.check == 'true'
        shell: bash
        run: |
          # There shouldn't be anything in dist but make sure
          rm -rf ./dist
          poetry build

      - name: Create the release & upload assets
        if: steps.safety.outputs.check == 'true'
        env:
          tag: ${{ steps.release-tag.outputs.tag }}
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          shopt -s nullglob

          # Semver hack
          prerelease=$([[ '${{ env.tag }}' =~ - ]] && echo -n 'true' || echo -n 'false')

          gh release create \
            '${{ env.tag }}' \
            --draft \
            --prerelease=${prerelease} \
            --generate-notes \
            --target='${{ github.ref_name }}'
          gh release upload '${{ env.tag }}' dist/*
          gh release edit '${{ env.tag }}' --draft=false
